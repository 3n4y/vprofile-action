name: "Setup Infrastructure"
on:
  push:
    branches:
      - staging
          
env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
   terraform:
     name: "Apply terraform code changes"
     runs-on: ubuntu-latest
     defaults:
       run:
         shell: bash
         working-directory: ./terraform

     steps:
       - name: Checkout source code
         uses: actions/checkout@v4

       - name: Setup Terraform with specified version on the runner
         uses: hashicorp/setup-terraform@v3
         with:
           terraform_version: "1.9.3"

       - name: Configure Terraform variables
         id: key_vars
         run: echo "public_key = \"$PUBLIC_KEY\"" > terraform.tfvars

       - name: Terraform init
         id: init
         run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

       - name: Terraform format
         id: fmt
         run: terraform fmt -check

       - name: Terraform validate
         id: validate
         run: terraform validate

       - name: Terraform plan
         id: plan
         run: terraform plan -no-color -input=false -out planfile
         continue-on-error: true

       - name: Terraform plan status
         if: steps.plan.outcome == 'failure'
         run: exit 1

       - name: Terraform Apply
         id: apply
         run: terraform apply -auto-approve -input=false -parallelism=1 planfile


   ansible:
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./ansible

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.3" 

      - name: Terraform init and get ec2 ip address
        id: get_and_set_instance_ip
        run: |
          terraform init -backend-config="bucket=$BUCKET_TF_STATE"
          echo "instance_ip=$(terraform output instance_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: $PRIVATE_KEY

      - name: Retrieve instance IP and attach to playbook
        run: |
          INSTANCE_PUBLIC_IP=${{ steps.get_and_set_instance_ip.outputs.instance_ip }}
          echo "EC2 Instance Public IP: $INSTANCE_PUBLIC_IP"

          # Your Ansible playbook command here
          ansible-playbook -i $INSTANCE_PUBLIC_IP, install_minikube.yml
