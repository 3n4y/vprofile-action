name: "Setup Infrastructure"
on:
  push:
    branches:
      - staging
#    paths:
#      - terraform/**
#      - ansible/**
      
env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}

jobs:
   terraform:
     name: "Apply terraform code changes"
     runs-on: ubuntu-latest
     defaults:
       run:
         shell: bash
         working-directory: ./terraform

     steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform with specified version on the runner
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.9.3"
  #     - name: Configure Terraform variables
  #       id: key_vars
  #       run: echo "public_key = \"$PUBLIC_KEY\"" > terraform.tfvars

  #     - name: Terraform init
  #       id: init
  #       run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

  #     - name: Terraform format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform validate
  #       id: validate
  #       run: terraform validate

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform plan -no-color -input=false -out planfile
  #       continue-on-error: true

  #     - name: Terraform plan status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -auto-approve -input=false -parallelism=1 planfile

  #     - name: Retrieve instance public IP and store in file
  #       id: instance_ip
  #       run: |
  #         echo "$(terraform output instance_ip)" > instance_ip.txt

  #     - name: upload ip file as artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: instance_ip.txt
  #         path: ./terraform/instance_ip.txt
       - name: Create or update variable
         uses: actions/github-script@v6
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           VARIABLE_NAME: ${{ inputs.variable_name }}
           VARIABLE_VALUE: ${{ inputs.variable_value }}
         with:
            script: |
               const variable = github.actions.getRepositoryVariable({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 variable_name: VARIABLE_NAME
               });
               
               if (variable) {
                 github.actions.updateRepositoryVariable({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   variable_id: variable.id,
                   value: VARIABLE_VALUE
                 });
                 console.log(`Updated variable ${VARIABLE_NAME} with value ${VARIABLE_VALUE}`);
               } else {
                 github.actions.createRepositoryVariable({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   variable_name: VARIABLE_NAME,
                   value: VARIABLE_VALUE
                 });
                 console.log(`Created variable ${VARIABLE_NAME} with value ${VARIABLE_VALUE}`);
               }
   

   ansible:
    # needs: terraform
    runs-on: ubuntu-latest

    steps:
      # - name: Checkout code
        # uses: actions/checkout@v4
      
      - name: Download instace IP artifact
        id: get_artifact
        run: |
          INSTANCE_IP=$(cat instance_ip.txt)
          echo "EC2 instance Public IP: $INSTANCE_IP"
        
